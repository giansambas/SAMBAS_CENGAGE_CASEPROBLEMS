using System;
using static System.Console;
using System.Linq;
using System.IO;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

class GreenvilleRevenue
{
    const int ENTRY_FEE = 25;
    const int MIN_CONTESTANTS = 0;
    const int MAX_CONTESTANTS = 30;
    const char SENTINEL = 'Z';

    static void Main()
    {
        int lastYearContestants = GetContestantNumber("last year");
        int thisYearContestants = GetContestantNumber("this year");

        WriteLine($"Last year's competition had {lastYearContestants} contestants, and this year's has {thisYearContestants} contestants");

        int expectedRevenue = thisYearContestants * ENTRY_FEE;

        WriteLine("Revenue expected this year is {0}", expectedRevenue.ToString("C", CultureInfo.GetCultureInfo("en-US")));

        DisplayRelationship(thisYearContestants, lastYearContestants);

        Contestant[] contestants = new Contestant[thisYearContestants];

        GetContestantData(contestants);

        WriteContestantsFile(contestants, "Greenville.ser");

        Contestant[] loadedContestants = ReadContestantsFile("Greenville.ser");

        if (loadedContestants != null)
        {
            DisplayTalentCounts(loadedContestants);
            GetLists(loadedContestants);
        }
    }

    static int GetContestantNumber(string year)
    {
        int contestants;
        string input;
        bool isValid;

        do
        {
            Write($"Enter number of contestants {year} >> ");
            input = ReadLine();

            isValid = int.TryParse(input, out contestants) &&
                      contestants >= MIN_CONTESTANTS &&
                      contestants <= MAX_CONTESTANTS;
            if (!isValid)
            {
                WriteLine("Please enter a number between 0 and 30, inclusive.");
            }
        } while (!isValid);

        return contestants;
    }

    static void DisplayRelationship(int thisYear, int lastYear)
    {
        if (thisYear > lastYear * 2)
        {
            WriteLine("The competition is more than twice as big thisYear!");
        }
        else if (thisYear > lastYear)
        {
            WriteLine("The competition is bigger than ever!");
        }
        else
        {
            WriteLine("A tighter race this year! Come out and cast your vote!");
        }
    }

    static Contestant GetContestantCategory()
    {
        Contestant c = null;
        do
        {
            Write("Enter age category (C/T/A) >> ");
            string categoryInput = ReadLine().Trim().ToUpper();

            if (categoryInput.Length == 1)
            {
                switch (categoryInput[0])
                {
                    case 'C':
                        c = new ChildContestant();
                        break;
                    case 'T':
                        c = new TeenContestant();
                        break;
                    case 'A':
                        c = new AdultContestant();
                        break;
                }
            }

            if (c == null)
            {
                WriteLine("Invalid category code. Please enter C, T, or A.");
            }
        } while (c == null);
        return c;
    }

    static void GetContestantData(Contestant[] contestants)
    {
        WriteLine();

        for (int i = 0; i < contestants.Length; i++)
        {
            string rawCodeInput;
            string name;

            Write($"Enter contestant name >> ");
            name = ReadLine();

            Contestant c = GetContestantCategory();

            c.Name = name;

            WriteLine("Talent codes are:");
            WriteLine("S    Singing");
            WriteLine("D    Dancing");
            WriteLine("M    Musical instrument");
            WriteLine("O    Other");

            do
            {
                Write($"Enter talent code >> ");
                rawCodeInput = ReadLine();
                string trimmedCode = rawCodeInput.Trim();
                c.TalentCode = trimmedCode.ToUpper();

                if (c.TalentCode == "I")
                {
                    string echoedCode = rawCodeInput;

                    if (string.IsNullOrWhiteSpace(rawCodeInput))
                    {
                        echoedCode = "L";
                    }

                    WriteLine(echoedCode + " is not a valid code");
                }
            } while (c.TalentCode == "I");

            contestants[i] = c;

            WriteLine(c.ToString());
        }
    }

    static void DisplayTalentCounts(Contestant[] contestants)
    {
        WriteLine();
        WriteLine("The types of talent are:");

        int[] counts = new int[Contestant.talentCodes.Length];

        foreach (var c in contestants)
        {
            if (c == null) continue;

            int index = Array.IndexOf(Contestant.talentCodes, c.TalentCode);
            if (index >= 0)
            {
                counts[index]++;
            }
        }

        for (int i = 0; i < Contestant.talentStrings.Length; i++)
        {
            WriteLine("{0,-18}{1,1}", Contestant.talentStrings[i], counts[i]);
        }
    }

    static void GetLists(Contestant[] contestants)
    {
        string codeInput;
        string code;

        do
        {
            WriteLine();
            Write("Enter a talent code (S/D/M/O) to see the list or Z to exit: ");
            codeInput = ReadLine();

            string trimmedCode = codeInput.Trim();
            code = trimmedCode.ToUpper();

            if (code.Length == 1 && code[0] == SENTINEL)
            {
                break;
            }

            bool codeValid = Contestant.talentCodes.Contains(code);

            if (codeValid)
            {
                DisplayContestantsByCode(contestants, code);
            }
            else
            {
                string echoedCode = codeInput;
                if (string.IsNullOrWhiteSpace(echoedCode))
                {
                    echoedCode = "L";
                }

                WriteLine($"{echoedCode} is not a valid code");
            }
        } while (true);
    }

    static void DisplayContestantsByCode(Contestant[] contestants, string codeToMatch)
    {
        int index = Array.IndexOf(Contestant.talentCodes, codeToMatch);
        string talentName = (index >= 0) ? Contestant.talentStrings[index] : "Unknown";

        WriteLine($"Contestants with talent {talentName} are:");

        foreach (var c in contestants)
        {
            if (c == null) continue;

            if (c.TalentCode == codeToMatch)
            {
                WriteLine(c.ToString());
            }
        }
    }

    static void WriteContestantsFile(Contestant[] contestants, string fileName)
    {
        try
        {
            string jsonString = JsonSerializer.Serialize(contestants, new JsonSerializerOptions
            {
                WriteIndented = true,
            });

            File.WriteAllText(fileName, jsonString);
        }
        catch (Exception e)
        {
            WriteLine($"An error occurred while writing the file: {e.Message}");
        }
    }

    static Contestant[] ReadContestantsFile(string fileName)
    {
        Contestant[] contestants = null;
        try
        {
            string jsonString = File.ReadAllText(fileName);

            contestants = JsonSerializer.Deserialize<Contestant[]>(jsonString);
        }
        catch (FileNotFoundException)
        {
            WriteLine($"File {fileName} not found. Starting with an empty list.");
        }
        catch (Exception e)
        {
            WriteLine($"An error occurred while reading the file: {e.Message}");
        }
        return contestants;
    }
}

[JsonDerivedType(typeof(ChildContestant), typeDiscriminator: "child")]
[JsonDerivedType(typeof(TeenContestant), typeDiscriminator: "teen")]
[JsonDerivedType(typeof(AdultContestant), typeDiscriminator: "adult")]
class Contestant
{
    public static string[] talentCodes = { "S", "D", "M", "O" };
    public static string[] talentStrings = { "Singing", "Dancing", "Musical instrument", "Other" };

    public string Name { get; set; }

    public double Fee { get; protected set; }

    private string talentCodeField;
    private string talentField = "Invalid";

    public string TalentCode
    {
        get { return talentCodeField; }
        set
        {
            int index = Array.IndexOf(talentCodes, value);
            if (index >= 0)
            {
                talentCodeField = value;
                talentField = talentStrings[index];
            }
            else
            {
                talentCodeField = "I";
                talentField = "Invalid";
            }
        }
    }

    public string Talent
    {
        get { return talentField; }
    }

    public override string ToString()
    {
        string typeName = GetType().Name;
        string displayType = typeName.Replace("Contestant", "") + " Contestant";

        return string.Format("{0} {1} {2} Fee {3}",
            displayType,
            Name,
            TalentCode,
            Fee.ToString("C", CultureInfo.GetCultureInfo("en-US"))
        );
    }
}

class ChildContestant : Contestant
{
    public ChildContestant()
    {
        this.Fee = 15.00;
    }
}

class TeenContestant : Contestant
{
    public TeenContestant()
    {
        this.Fee = 20.00;
    }
}

class AdultContestant : Contestant
{
    public AdultContestant()
    {
        this.Fee = 30.00;
    }
}
